// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_task_definitions::_delete_task_definitions_output::DeleteTaskDefinitionsOutputBuilder;

pub use crate::operation::delete_task_definitions::_delete_task_definitions_input::DeleteTaskDefinitionsInputBuilder;

/// Fluent builder constructing a request to `DeleteTaskDefinitions`.
///
/// <p>Deletes one or more task definitions.</p>
/// <p>You must deregister a task definition revision before you delete it. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeregisterTaskDefinition.html">DeregisterTaskDefinition</a>.</p>
/// <p>When you delete a task definition revision, it is immediately transitions from the <code>INACTIVE</code> to <code>DELETE_IN_PROGRESS</code>. Existing tasks and services that reference a <code>DELETE_IN_PROGRESS</code> task definition revision continue to run without disruption. Existing services that reference a <code>DELETE_IN_PROGRESS</code> task definition revision can still scale up or down by modifying the service's desired count.</p>
/// <p>You can't use a <code>DELETE_IN_PROGRESS</code> task definition revision to run new tasks or create new services. You also can't update an existing service to reference a <code>DELETE_IN_PROGRESS</code> task definition revision.</p>
/// <p> A task definition revision will stay in <code>DELETE_IN_PROGRESS</code> status until all the associated tasks and services have been terminated.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTaskDefinitionsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_task_definitions::builders::DeleteTaskDefinitionsInputBuilder,
}
impl DeleteTaskDefinitionsFluentBuilder {
    /// Creates a new `DeleteTaskDefinitions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_task_definitions::DeleteTaskDefinitions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_task_definitions::DeleteTaskDefinitionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_task_definitions::DeleteTaskDefinitionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_task_definitions::DeleteTaskDefinitionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    #[cfg(aws_sdk_unstable)]
    /// This function replaces the parameter with new one.
    /// It is useful when you want to replace the existing data with de-serialized data.
    /// ```compile_fail
    /// let result_future = async {
    ///     let deserialized_parameters: crate::operation::delete_task_definitions::builders::DeleteTaskDefinitionsInputBuilder  = serde_json::from_str(&json_string).unwrap();
    ///     client.delete_task_definitions().set_fields(&deserialized_parameters).send().await
    /// };
    /// ```
    pub fn set_fields(
        mut self,
        data: crate::operation::delete_task_definitions::builders::DeleteTaskDefinitionsInputBuilder,
    ) -> Self {
        self.inner = data;
        self
    }
    /// Appends an item to `taskDefinitions`.
    ///
    /// To override the contents of this collection use [`set_task_definitions`](Self::set_task_definitions).
    ///
    /// <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or full Amazon Resource Name (ARN) of the task definition to delete. You must specify a <code>revision</code>.</p>
    /// <p>You can specify up to 10 task definitions as a comma separated list.</p>
    pub fn task_definitions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_definitions(input.into());
        self
    }
    /// <p>The <code>family</code> and <code>revision</code> (<code>family:revision</code>) or full Amazon Resource Name (ARN) of the task definition to delete. You must specify a <code>revision</code>.</p>
    /// <p>You can specify up to 10 task definitions as a comma separated list.</p>
    pub fn set_task_definitions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_task_definitions(input);
        self
    }
}
