// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Active Directory to be used for client authentication.</p>
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DirectoryServiceAuthenticationRequest {
    /// <p>The ID of the Active Directory to be used for authentication.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
}
impl DirectoryServiceAuthenticationRequest {
    /// <p>The ID of the Active Directory to be used for authentication.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
}
impl DirectoryServiceAuthenticationRequest {
    /// Creates a new builder-style object to manufacture [`DirectoryServiceAuthenticationRequest`](crate::types::DirectoryServiceAuthenticationRequest).
    pub fn builder() -> crate::types::builders::DirectoryServiceAuthenticationRequestBuilder {
        crate::types::builders::DirectoryServiceAuthenticationRequestBuilder::default()
    }
}

/// This is the datatype returned when calling `Builder::build()`.
#[allow(dead_code)]
pub type OutputShape = crate::types::DirectoryServiceAuthenticationRequest;
/// A builder for [`DirectoryServiceAuthenticationRequest`](crate::types::DirectoryServiceAuthenticationRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
pub struct DirectoryServiceAuthenticationRequestBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
}
impl DirectoryServiceAuthenticationRequestBuilder {
    /// <p>The ID of the Active Directory to be used for authentication.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The ID of the Active Directory to be used for authentication.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DirectoryServiceAuthenticationRequest`](crate::types::DirectoryServiceAuthenticationRequest).
    pub fn build(self) -> crate::types::DirectoryServiceAuthenticationRequest {
        crate::types::DirectoryServiceAuthenticationRequest {
            directory_id: self.directory_id,
        }
    }
}
