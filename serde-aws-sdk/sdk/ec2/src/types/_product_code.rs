// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a product code.</p>
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProductCode {
    /// <p>The product code.</p>
    #[doc(hidden)]
    pub product_code_id: std::option::Option<std::string::String>,
    /// <p>The type of product code.</p>
    #[doc(hidden)]
    pub product_code_type: std::option::Option<crate::types::ProductCodeValues>,
}
impl ProductCode {
    /// <p>The product code.</p>
    pub fn product_code_id(&self) -> std::option::Option<&str> {
        self.product_code_id.as_deref()
    }
    /// <p>The type of product code.</p>
    pub fn product_code_type(&self) -> std::option::Option<&crate::types::ProductCodeValues> {
        self.product_code_type.as_ref()
    }
}
impl ProductCode {
    /// Creates a new builder-style object to manufacture [`ProductCode`](crate::types::ProductCode).
    pub fn builder() -> crate::types::builders::ProductCodeBuilder {
        crate::types::builders::ProductCodeBuilder::default()
    }
}

/// This is the datatype returned when calling `Builder::build()`.
#[allow(dead_code)]
pub type OutputShape = crate::types::ProductCode;
/// A builder for [`ProductCode`](crate::types::ProductCode).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
pub struct ProductCodeBuilder {
    pub(crate) product_code_id: std::option::Option<std::string::String>,
    pub(crate) product_code_type: std::option::Option<crate::types::ProductCodeValues>,
}
impl ProductCodeBuilder {
    /// <p>The product code.</p>
    pub fn product_code_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_code_id = Some(input.into());
        self
    }
    /// <p>The product code.</p>
    pub fn set_product_code_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_code_id = input;
        self
    }
    /// <p>The type of product code.</p>
    pub fn product_code_type(mut self, input: crate::types::ProductCodeValues) -> Self {
        self.product_code_type = Some(input);
        self
    }
    /// <p>The type of product code.</p>
    pub fn set_product_code_type(
        mut self,
        input: std::option::Option<crate::types::ProductCodeValues>,
    ) -> Self {
        self.product_code_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ProductCode`](crate::types::ProductCode).
    pub fn build(self) -> crate::types::ProductCode {
        crate::types::ProductCode {
            product_code_id: self.product_code_id,
            product_code_type: self.product_code_type,
        }
    }
}
