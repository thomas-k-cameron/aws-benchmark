// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a load balancer listener.</p>
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalysisLoadBalancerListener {
    /// <p>The port on which the load balancer is listening.</p>
    #[doc(hidden)]
    pub load_balancer_port: std::option::Option<i32>,
    /// <p>[Classic Load Balancers] The back-end port for the listener.</p>
    #[doc(hidden)]
    pub instance_port: std::option::Option<i32>,
}
impl AnalysisLoadBalancerListener {
    /// <p>The port on which the load balancer is listening.</p>
    pub fn load_balancer_port(&self) -> std::option::Option<i32> {
        self.load_balancer_port
    }
    /// <p>[Classic Load Balancers] The back-end port for the listener.</p>
    pub fn instance_port(&self) -> std::option::Option<i32> {
        self.instance_port
    }
}
impl AnalysisLoadBalancerListener {
    /// Creates a new builder-style object to manufacture [`AnalysisLoadBalancerListener`](crate::types::AnalysisLoadBalancerListener).
    pub fn builder() -> crate::types::builders::AnalysisLoadBalancerListenerBuilder {
        crate::types::builders::AnalysisLoadBalancerListenerBuilder::default()
    }
}

/// This is the datatype returned when calling `Builder::build()`.
#[allow(dead_code)]
pub type OutputShape = crate::types::AnalysisLoadBalancerListener;
/// A builder for [`AnalysisLoadBalancerListener`](crate::types::AnalysisLoadBalancerListener).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
pub struct AnalysisLoadBalancerListenerBuilder {
    pub(crate) load_balancer_port: std::option::Option<i32>,
    pub(crate) instance_port: std::option::Option<i32>,
}
impl AnalysisLoadBalancerListenerBuilder {
    /// <p>The port on which the load balancer is listening.</p>
    pub fn load_balancer_port(mut self, input: i32) -> Self {
        self.load_balancer_port = Some(input);
        self
    }
    /// <p>The port on which the load balancer is listening.</p>
    pub fn set_load_balancer_port(mut self, input: std::option::Option<i32>) -> Self {
        self.load_balancer_port = input;
        self
    }
    /// <p>[Classic Load Balancers] The back-end port for the listener.</p>
    pub fn instance_port(mut self, input: i32) -> Self {
        self.instance_port = Some(input);
        self
    }
    /// <p>[Classic Load Balancers] The back-end port for the listener.</p>
    pub fn set_instance_port(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_port = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalysisLoadBalancerListener`](crate::types::AnalysisLoadBalancerListener).
    pub fn build(self) -> crate::types::AnalysisLoadBalancerListener {
        crate::types::AnalysisLoadBalancerListener {
            load_balancer_port: self.load_balancer_port,
            instance_port: self.instance_port,
        }
    }
}
