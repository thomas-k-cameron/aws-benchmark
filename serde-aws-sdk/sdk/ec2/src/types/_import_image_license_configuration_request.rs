// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request information of license configurations.</p>
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportImageLicenseConfigurationRequest {
    /// <p>The ARN of a license configuration.</p>
    #[doc(hidden)]
    pub license_configuration_arn: std::option::Option<std::string::String>,
}
impl ImportImageLicenseConfigurationRequest {
    /// <p>The ARN of a license configuration.</p>
    pub fn license_configuration_arn(&self) -> std::option::Option<&str> {
        self.license_configuration_arn.as_deref()
    }
}
impl ImportImageLicenseConfigurationRequest {
    /// Creates a new builder-style object to manufacture [`ImportImageLicenseConfigurationRequest`](crate::types::ImportImageLicenseConfigurationRequest).
    pub fn builder() -> crate::types::builders::ImportImageLicenseConfigurationRequestBuilder {
        crate::types::builders::ImportImageLicenseConfigurationRequestBuilder::default()
    }
}

/// This is the datatype returned when calling `Builder::build()`.
#[allow(dead_code)]
pub type OutputShape = crate::types::ImportImageLicenseConfigurationRequest;
/// A builder for [`ImportImageLicenseConfigurationRequest`](crate::types::ImportImageLicenseConfigurationRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
pub struct ImportImageLicenseConfigurationRequestBuilder {
    pub(crate) license_configuration_arn: std::option::Option<std::string::String>,
}
impl ImportImageLicenseConfigurationRequestBuilder {
    /// <p>The ARN of a license configuration.</p>
    pub fn license_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_configuration_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a license configuration.</p>
    pub fn set_license_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.license_configuration_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportImageLicenseConfigurationRequest`](crate::types::ImportImageLicenseConfigurationRequest).
    pub fn build(self) -> crate::types::ImportImageLicenseConfigurationRequest {
        crate::types::ImportImageLicenseConfigurationRequest {
            license_configuration_arn: self.license_configuration_arn,
        }
    }
}
