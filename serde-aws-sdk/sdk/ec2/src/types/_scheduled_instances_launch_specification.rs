// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the launch specification for a Scheduled Instance.</p>
/// <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
/// This data may contain sensitive information; It will not be obscured when serialized.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ScheduledInstancesLaunchSpecification {
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The block device mapping entries.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub block_device_mappings:
        std::option::Option<std::vec::Vec<crate::types::ScheduledInstancesBlockDeviceMapping>>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>
    /// <p>Default: <code>false</code> </p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub ebs_optimized: std::option::Option<bool>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The IAM instance profile.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub iam_instance_profile:
        std::option::Option<crate::types::ScheduledInstancesIamInstanceProfile>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The ID of the Amazon Machine Image (AMI).</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The instance type.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The ID of the kernel.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub kernel_id: std::option::Option<std::string::String>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The name of the key pair.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub key_name: std::option::Option<std::string::String>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>Enable or disable monitoring for the instances.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub monitoring: std::option::Option<crate::types::ScheduledInstancesMonitoring>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The network interfaces.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub network_interfaces:
        std::option::Option<std::vec::Vec<crate::types::ScheduledInstancesNetworkInterface>>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The placement information.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub placement: std::option::Option<crate::types::ScheduledInstancesPlacement>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The ID of the RAM disk.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub ramdisk_id: std::option::Option<std::string::String>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The IDs of the security groups.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The ID of the subnet in which to launch the instances.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// This data may contain sensitive information; It will not be obscured when serialized.
    /// <p>The base64-encoded MIME user data.</p>
    /// This data may contain sensitive information; It will not be obscured when serialized.
    #[doc(hidden)]
    pub user_data: std::option::Option<std::string::String>,
}
impl ScheduledInstancesLaunchSpecification {
    /// <p>The block device mapping entries.</p>
    pub fn block_device_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::ScheduledInstancesBlockDeviceMapping]> {
        self.block_device_mappings.as_deref()
    }
    /// <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn ebs_optimized(&self) -> std::option::Option<bool> {
        self.ebs_optimized
    }
    /// <p>The IAM instance profile.</p>
    pub fn iam_instance_profile(
        &self,
    ) -> std::option::Option<&crate::types::ScheduledInstancesIamInstanceProfile> {
        self.iam_instance_profile.as_ref()
    }
    /// <p>The ID of the Amazon Machine Image (AMI).</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The instance type.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The ID of the kernel.</p>
    pub fn kernel_id(&self) -> std::option::Option<&str> {
        self.kernel_id.as_deref()
    }
    /// <p>The name of the key pair.</p>
    pub fn key_name(&self) -> std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>Enable or disable monitoring for the instances.</p>
    pub fn monitoring(&self) -> std::option::Option<&crate::types::ScheduledInstancesMonitoring> {
        self.monitoring.as_ref()
    }
    /// <p>The network interfaces.</p>
    pub fn network_interfaces(
        &self,
    ) -> std::option::Option<&[crate::types::ScheduledInstancesNetworkInterface]> {
        self.network_interfaces.as_deref()
    }
    /// <p>The placement information.</p>
    pub fn placement(&self) -> std::option::Option<&crate::types::ScheduledInstancesPlacement> {
        self.placement.as_ref()
    }
    /// <p>The ID of the RAM disk.</p>
    pub fn ramdisk_id(&self) -> std::option::Option<&str> {
        self.ramdisk_id.as_deref()
    }
    /// <p>The IDs of the security groups.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The base64-encoded MIME user data.</p>
    pub fn user_data(&self) -> std::option::Option<&str> {
        self.user_data.as_deref()
    }
}
impl std::fmt::Debug for ScheduledInstancesLaunchSpecification {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduledInstancesLaunchSpecification");
        formatter.field("block_device_mappings", &"*** Sensitive Data Redacted ***");
        formatter.field("ebs_optimized", &"*** Sensitive Data Redacted ***");
        formatter.field("iam_instance_profile", &"*** Sensitive Data Redacted ***");
        formatter.field("image_id", &"*** Sensitive Data Redacted ***");
        formatter.field("instance_type", &"*** Sensitive Data Redacted ***");
        formatter.field("kernel_id", &"*** Sensitive Data Redacted ***");
        formatter.field("key_name", &"*** Sensitive Data Redacted ***");
        formatter.field("monitoring", &"*** Sensitive Data Redacted ***");
        formatter.field("network_interfaces", &"*** Sensitive Data Redacted ***");
        formatter.field("placement", &"*** Sensitive Data Redacted ***");
        formatter.field("ramdisk_id", &"*** Sensitive Data Redacted ***");
        formatter.field("security_group_ids", &"*** Sensitive Data Redacted ***");
        formatter.field("subnet_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ScheduledInstancesLaunchSpecification {
    /// Creates a new builder-style object to manufacture [`ScheduledInstancesLaunchSpecification`](crate::types::ScheduledInstancesLaunchSpecification).
    pub fn builder() -> crate::types::builders::ScheduledInstancesLaunchSpecificationBuilder {
        crate::types::builders::ScheduledInstancesLaunchSpecificationBuilder::default()
    }
}

/// This is the datatype returned when calling `Builder::build()`.
#[allow(dead_code)]
pub type OutputShape = crate::types::ScheduledInstancesLaunchSpecification;
/// A builder for [`ScheduledInstancesLaunchSpecification`](crate::types::ScheduledInstancesLaunchSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
/// This data may contain sensitive information; It will not be obscured when serialized.
pub struct ScheduledInstancesLaunchSpecificationBuilder {
    pub(crate) block_device_mappings:
        std::option::Option<std::vec::Vec<crate::types::ScheduledInstancesBlockDeviceMapping>>,
    pub(crate) ebs_optimized: std::option::Option<bool>,
    pub(crate) iam_instance_profile:
        std::option::Option<crate::types::ScheduledInstancesIamInstanceProfile>,
    pub(crate) image_id: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) kernel_id: std::option::Option<std::string::String>,
    pub(crate) key_name: std::option::Option<std::string::String>,
    pub(crate) monitoring: std::option::Option<crate::types::ScheduledInstancesMonitoring>,
    pub(crate) network_interfaces:
        std::option::Option<std::vec::Vec<crate::types::ScheduledInstancesNetworkInterface>>,
    pub(crate) placement: std::option::Option<crate::types::ScheduledInstancesPlacement>,
    pub(crate) ramdisk_id: std::option::Option<std::string::String>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) user_data: std::option::Option<std::string::String>,
}
impl ScheduledInstancesLaunchSpecificationBuilder {
    /// Appends an item to `block_device_mappings`.
    ///
    /// To override the contents of this collection use [`set_block_device_mappings`](Self::set_block_device_mappings).
    ///
    /// <p>The block device mapping entries.</p>
    pub fn block_device_mappings(
        mut self,
        input: crate::types::ScheduledInstancesBlockDeviceMapping,
    ) -> Self {
        let mut v = self.block_device_mappings.unwrap_or_default();
        v.push(input);
        self.block_device_mappings = Some(v);
        self
    }
    /// <p>The block device mapping entries.</p>
    pub fn set_block_device_mappings(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::ScheduledInstancesBlockDeviceMapping>,
        >,
    ) -> Self {
        self.block_device_mappings = input;
        self
    }
    /// <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn ebs_optimized(mut self, input: bool) -> Self {
        self.ebs_optimized = Some(input);
        self
    }
    /// <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>
    /// <p>Default: <code>false</code> </p>
    pub fn set_ebs_optimized(mut self, input: std::option::Option<bool>) -> Self {
        self.ebs_optimized = input;
        self
    }
    /// <p>The IAM instance profile.</p>
    pub fn iam_instance_profile(
        mut self,
        input: crate::types::ScheduledInstancesIamInstanceProfile,
    ) -> Self {
        self.iam_instance_profile = Some(input);
        self
    }
    /// <p>The IAM instance profile.</p>
    pub fn set_iam_instance_profile(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstancesIamInstanceProfile>,
    ) -> Self {
        self.iam_instance_profile = input;
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI).</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Machine Image (AMI).</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The instance type.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The ID of the kernel.</p>
    pub fn kernel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kernel_id = Some(input.into());
        self
    }
    /// <p>The ID of the kernel.</p>
    pub fn set_kernel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kernel_id = input;
        self
    }
    /// <p>The name of the key pair.</p>
    pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_name = Some(input.into());
        self
    }
    /// <p>The name of the key pair.</p>
    pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>Enable or disable monitoring for the instances.</p>
    pub fn monitoring(mut self, input: crate::types::ScheduledInstancesMonitoring) -> Self {
        self.monitoring = Some(input);
        self
    }
    /// <p>Enable or disable monitoring for the instances.</p>
    pub fn set_monitoring(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstancesMonitoring>,
    ) -> Self {
        self.monitoring = input;
        self
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p>The network interfaces.</p>
    pub fn network_interfaces(
        mut self,
        input: crate::types::ScheduledInstancesNetworkInterface,
    ) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = Some(v);
        self
    }
    /// <p>The network interfaces.</p>
    pub fn set_network_interfaces(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ScheduledInstancesNetworkInterface>>,
    ) -> Self {
        self.network_interfaces = input;
        self
    }
    /// <p>The placement information.</p>
    pub fn placement(mut self, input: crate::types::ScheduledInstancesPlacement) -> Self {
        self.placement = Some(input);
        self
    }
    /// <p>The placement information.</p>
    pub fn set_placement(
        mut self,
        input: std::option::Option<crate::types::ScheduledInstancesPlacement>,
    ) -> Self {
        self.placement = input;
        self
    }
    /// <p>The ID of the RAM disk.</p>
    pub fn ramdisk_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ramdisk_id = Some(input.into());
        self
    }
    /// <p>The ID of the RAM disk.</p>
    pub fn set_ramdisk_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ramdisk_id = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The IDs of the security groups.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>The IDs of the security groups.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The base64-encoded MIME user data.</p>
    pub fn user_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_data = Some(input.into());
        self
    }
    /// <p>The base64-encoded MIME user data.</p>
    pub fn set_user_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_data = input;
        self
    }
    /// Consumes the builder and constructs a [`ScheduledInstancesLaunchSpecification`](crate::types::ScheduledInstancesLaunchSpecification).
    pub fn build(self) -> crate::types::ScheduledInstancesLaunchSpecification {
        crate::types::ScheduledInstancesLaunchSpecification {
            block_device_mappings: self.block_device_mappings,
            ebs_optimized: self.ebs_optimized,
            iam_instance_profile: self.iam_instance_profile,
            image_id: self.image_id,
            instance_type: self.instance_type,
            kernel_id: self.kernel_id,
            key_name: self.key_name,
            monitoring: self.monitoring,
            network_interfaces: self.network_interfaces,
            placement: self.placement,
            ramdisk_id: self.ramdisk_id,
            security_group_ids: self.security_group_ids,
            subnet_id: self.subnet_id,
            user_data: self.user_data,
        }
    }
}
impl std::fmt::Debug for ScheduledInstancesLaunchSpecificationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduledInstancesLaunchSpecificationBuilder");
        formatter.field("block_device_mappings", &"*** Sensitive Data Redacted ***");
        formatter.field("ebs_optimized", &"*** Sensitive Data Redacted ***");
        formatter.field("iam_instance_profile", &"*** Sensitive Data Redacted ***");
        formatter.field("image_id", &"*** Sensitive Data Redacted ***");
        formatter.field("instance_type", &"*** Sensitive Data Redacted ***");
        formatter.field("kernel_id", &"*** Sensitive Data Redacted ***");
        formatter.field("key_name", &"*** Sensitive Data Redacted ***");
        formatter.field("monitoring", &"*** Sensitive Data Redacted ***");
        formatter.field("network_interfaces", &"*** Sensitive Data Redacted ***");
        formatter.field("placement", &"*** Sensitive Data Redacted ***");
        formatter.field("ramdisk_id", &"*** Sensitive Data Redacted ***");
        formatter.field("security_group_ids", &"*** Sensitive Data Redacted ***");
        formatter.field("subnet_id", &"*** Sensitive Data Redacted ***");
        formatter.field("user_data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
