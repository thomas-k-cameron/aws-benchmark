// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Inference accelerators for the instance type.</p>
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InferenceDeviceInfo {
    /// <p>The number of Inference accelerators for the instance type.</p>
    #[doc(hidden)]
    pub count: std::option::Option<i32>,
    /// <p>The name of the Inference accelerator.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The manufacturer of the Inference accelerator.</p>
    #[doc(hidden)]
    pub manufacturer: std::option::Option<std::string::String>,
}
impl InferenceDeviceInfo {
    /// <p>The number of Inference accelerators for the instance type.</p>
    pub fn count(&self) -> std::option::Option<i32> {
        self.count
    }
    /// <p>The name of the Inference accelerator.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The manufacturer of the Inference accelerator.</p>
    pub fn manufacturer(&self) -> std::option::Option<&str> {
        self.manufacturer.as_deref()
    }
}
impl InferenceDeviceInfo {
    /// Creates a new builder-style object to manufacture [`InferenceDeviceInfo`](crate::types::InferenceDeviceInfo).
    pub fn builder() -> crate::types::builders::InferenceDeviceInfoBuilder {
        crate::types::builders::InferenceDeviceInfoBuilder::default()
    }
}

/// This is the datatype returned when calling `Builder::build()`.
#[allow(dead_code)]
pub type OutputShape = crate::types::InferenceDeviceInfo;
/// A builder for [`InferenceDeviceInfo`](crate::types::InferenceDeviceInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-serialize"),
    derive(serde::Serialize)
)]
#[cfg_attr(
    all(aws_sdk_unstable, feature = "serde-deserialize"),
    derive(serde::Deserialize)
)]
pub struct InferenceDeviceInfoBuilder {
    pub(crate) count: std::option::Option<i32>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) manufacturer: std::option::Option<std::string::String>,
}
impl InferenceDeviceInfoBuilder {
    /// <p>The number of Inference accelerators for the instance type.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The number of Inference accelerators for the instance type.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p>The name of the Inference accelerator.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Inference accelerator.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The manufacturer of the Inference accelerator.</p>
    pub fn manufacturer(mut self, input: impl Into<std::string::String>) -> Self {
        self.manufacturer = Some(input.into());
        self
    }
    /// <p>The manufacturer of the Inference accelerator.</p>
    pub fn set_manufacturer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.manufacturer = input;
        self
    }
    /// Consumes the builder and constructs a [`InferenceDeviceInfo`](crate::types::InferenceDeviceInfo).
    pub fn build(self) -> crate::types::InferenceDeviceInfo {
        crate::types::InferenceDeviceInfo {
            count: self.count,
            name: self.name,
            manufacturer: self.manufacturer,
        }
    }
}
